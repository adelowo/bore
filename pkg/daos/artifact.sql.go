// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: artifact.sql

package daos

import (
	"context"
	"database/sql"
)

const updateArtifactLastModified = `-- name: UpdateArtifactLastModified :exec
UPDATE artifacts SET last_modified = unixepoch() WHERE id = ?1
`

func (q *Queries) UpdateArtifactLastModified(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateArtifactLastModified, id)
	return err
}

const upsertArtifact = `-- name: UpsertArtifact :one
INSERT INTO artifacts (content, content_sha256, type, collection_id) VALUES (?1, sha256(?1), ?2, ?3)
  ON CONFLICT(content_sha256, COALESCE(collection_id, 'root'))
  DO UPDATE SET last_modified = unixepoch()
  RETURNING id, content, content_sha256, type, last_modified, collection_id
`

type UpsertArtifactParams struct {
	Content      []byte
	ArtifactType string
	CollectionID sql.NullString
}

func (q *Queries) UpsertArtifact(ctx context.Context, arg UpsertArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, upsertArtifact, arg.Content, arg.ArtifactType, arg.CollectionID)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ContentSha256,
		&i.Type,
		&i.LastModified,
		&i.CollectionID,
	)
	return i, err
}
